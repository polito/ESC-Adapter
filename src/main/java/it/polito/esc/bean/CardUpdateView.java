package it.polito.esc.bean;

import java.io.Serializable;
import java.util.Date;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;

public class CardUpdateView implements Cloneable, Serializable {

	private static final long serialVersionUID = 4121992091220241110L;

	public static final String DATE_PATTERN = "yyyy-MM-dd";

	public static final String STATUS_ACTIVE = "ACTIVE";
	public static final String STATUS_INACTIVE = "INACTIVE";

	/**
	 * Unknown / None
	 */
	public static final String TYPE_UNKNOWN = "UNKNOWN";
	/**
	 * Physical passive card, with no electronic component
	 */
	public static final String TYPE_PASSIVE = "PASSIVE";
	/**
	 * Physical smart card, without ESC data zone
	 */
	public static final String TYPE_SMART_NO_CDZ = "SMART_NO_CDZ";
	/**
	 * Physical smart card, with ESC data zone
	 */
	public static final String TYPE_SMART_CDZ = "SMART_CDZ";
	/**
	 * Physical smart card, with custom data by service providers
	 */
	public static final String TYPE_SMART_MAY_SP = "SMART_MAY_SP";
	/**
	 * Digital passive card, with no electronic component
	 */
	public static final String TYPE_SMART_PASSIVE = "SMART_PASSIVE";
	/**
	 * Digital smart card, with physical card emulation
	 */
	public static final String TYPE_SMART_PASSIVE_EMULATION = "SMART_PASSIVE_EMULATION";

	/**
	 * The card number using the algorithm RFC-4122 version 1, use /api/v2/cards/generate-escn to generate a valid card number or leave it blank and it will be autogenerated (POST ONLY)
	 * 
	 * example: 3e506370-826a-103d-bf76-001000000001
	 */
	@JsonProperty("cardNumber")
	@JsonInclude(JsonInclude.Include.NON_NULL)
	@SerializedName("cardNumber")
	@Expose
	private String cardNumber;

	/**
	 * The status of the card (ACTIVE/INACTIVE)
	 * 
	 * example: ACTIVE
	 */
	@JsonProperty("cardStatusType")
	@JsonInclude(JsonInclude.Include.NON_NULL)
	@SerializedName("cardStatusType")
	@Expose
	private String cardStatusType;

	/**
	 * Card Type.
	 * 
	 * Possible values are:
	 * 	- UNKNOWN = Unknown / None
	 * 	- PASSIVE = Physical passive card, with no electronic component
	 * 	- SMART_NO_CDZ = Physical smart card, without ESC data zone
	 * 	- SMART_CDZ = Physical smart card, with ESC data zone
	 * 	- SMART_MAY_SP = Physical smart card, with custom data by service providers
	 * 	- SMART_PASSIVE = Digital passive card, with no electronic component
	 * 	- SMART_PASSIVE_EMULATION = Digital smart card, with physical card emulation
	 * 
	 * example: UNKNOWN
	 * 
	 * required: true
	 */
	@JsonProperty("cardType")
	@JsonInclude(JsonInclude.Include.NON_NULL)
	@SerializedName("cardType")
	@Expose
	private String cardType;

	/**
	 * The name displayed on the card
	 * 
	 * example: Card of John
	 */
	@JsonProperty("displayName")
	@JsonInclude(JsonInclude.Include.NON_NULL)
	@SerializedName("displayName")
	@Expose
	private String displayName;

	/**
	 * The expiration date of the card (yyyy-MM-dd ISO-8601)
	 * 
	 * example: 2042-12-04
	 * 
	 * required: true
	 */
	@JsonProperty("expiresAt")
	@JsonInclude(JsonInclude.Include.NON_NULL)
	@SerializedName("expiresAt")
	@Expose
	private Date expiresAt;

	/**
	 * The issued date of the card (yyyy-MM-dd ISO-8601)
	 * 
	 * example: 1992-12-04
	 * 
	 * required: true
	 */
	@JsonProperty("issuedAt")
	@JsonInclude(JsonInclude.Include.NON_NULL)
	@SerializedName("issuedAt")
	@Expose
	private Date issuedAt;

	/**
	 * The identifier of the issuer organisation (PIC)
	 * 
	 * example: 123456789
	 * 
	 * required: true
	 */
	@JsonProperty("issuerIdentifier")
	@JsonInclude(JsonInclude.Include.NON_NULL)
	@SerializedName("issuerIdentifier")
	@Expose
	private String issuerIdentifier;

	/**
	 * The european student identifier of the student
	 * 
	 * example: urn:schac:personalUniqueCode:int:esi:HR:xxxxxxxxxx
	 * 
	 * required: true
	 */
	@JsonProperty("personIdentifier")
	@JsonInclude(JsonInclude.Include.NON_NULL)
	@SerializedName("personIdentifier")
	@Expose
	private String personIdentifier;

	/**
	 * The identifier of the processor organisation (VAT)
	 * 
	 * example: B12345678
	 */
	@JsonProperty("processorIdentifier")
	@JsonInclude(JsonInclude.Include.NON_NULL)
	@SerializedName("processorIdentifier")
	@Expose
	private String processorIdentifier;

	public CardUpdateView(String cardType, Date expiresAt, Date issuedAt, String issuerIdentifier,
			String personIdentifier) {
		super();
		this.setCardType(cardType);
		this.setExpiresAt(expiresAt);
		this.setIssuedAt(issuedAt);
		this.setIssuerIdentifier(issuerIdentifier);
		this.setPersonIdentifier(personIdentifier);
	}

	@JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
	public CardUpdateView(@JsonProperty("cardNumber") String cardNumber,
			@JsonProperty("cardStatusType") String cardStatusType, @JsonProperty("cardType") String cardType,
			@JsonProperty("displayName") String displayName,
			@JsonProperty("expiresAt") @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = DATE_PATTERN) Date expiresAt,
			@JsonProperty("issuedAt") @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = DATE_PATTERN) Date issuedAt,
			@JsonProperty("issuerIdentifier") String issuerIdentifier,
			@JsonProperty("personIdentifier") String personIdentifier,
			@JsonProperty("processorIdentifier") String processorIdentifier) {
		super();
		this.setCardNumber(cardNumber);
		this.setCardStatusType(cardStatusType);
		this.setCardType(cardType);
		this.setDisplayName(displayName);
		this.setExpiresAt(expiresAt);
		this.setIssuedAt(issuedAt);
		this.setIssuerIdentifier(issuerIdentifier);
		this.setPersonIdentifier(personIdentifier);
		this.setProcessorIdentifier(processorIdentifier);
	}

	public String getCardNumber() {
		return cardNumber;
	}

	public void setCardNumber(String cardNumber) {
		this.cardNumber = cardNumber;
	}

	public String getCardStatusType() {
		return cardStatusType;
	}

	public void setCardStatusType(String cardStatusType) {
		if (cardStatusType != null && !cardStatusType.equals(STATUS_ACTIVE) && !cardStatusType.equals(STATUS_INACTIVE))
			throw new IllegalArgumentException("The card status type must be ACTIVE or INACTIVE");
		this.cardStatusType = cardStatusType;
	}

	public String getCardType() {
		return cardType;
	}

	public void setCardType(String cardType) {
		if (cardType == null || cardType.isBlank()
				|| (!cardType.equals(TYPE_UNKNOWN) && !cardType.equals(TYPE_PASSIVE)
						&& !cardType.equals(TYPE_SMART_NO_CDZ) && !cardType.equals(TYPE_SMART_CDZ)
						&& !cardType.equals(TYPE_SMART_MAY_SP) && !cardType.equals(TYPE_SMART_PASSIVE)
						&& !cardType.equals(TYPE_SMART_PASSIVE_EMULATION)))
			throw new IllegalArgumentException(
					"The card type must be UNKNOWN, PASSIVE, SMART_NO_CDZ, SMART_CDZ, SMART_MAY_SP, SMART_PASSIVE or SMART_PASSIVE_EMULATION");
		this.cardType = cardType;
	}

	public String getDisplayName() {
		return displayName;
	}

	public void setDisplayName(String displayName) {
		this.displayName = displayName;
	}

	public Date getExpiresAt() {
		return expiresAt;
	}

	public void setExpiresAt(Date expiresAt) {
		if (expiresAt == null)
			throw new IllegalArgumentException("The expires at date cannot be null");
		this.expiresAt = expiresAt;
	}

	public Date getIssuedAt() {
		return issuedAt;
	}

	public void setIssuedAt(Date issuedAt) {
		if (issuedAt == null)
			throw new IllegalArgumentException("The issued at date cannot be null");
		this.issuedAt = issuedAt;
	}

	public String getIssuerIdentifier() {
		return issuerIdentifier;
	}

	public void setIssuerIdentifier(String issuerIdentifier) {
		if (issuerIdentifier == null || issuerIdentifier.isBlank())
			throw new IllegalArgumentException("The issuer identifier cannot be null or empty");
		this.issuerIdentifier = issuerIdentifier;
	}

	public String getPersonIdentifier() {
		return personIdentifier;
	}

	public void setPersonIdentifier(String personIdentifier) {
		if (personIdentifier == null || personIdentifier.isBlank())
			throw new IllegalArgumentException("The person identifier cannot be null or empty");
		this.personIdentifier = personIdentifier;
	}

	public String getProcessorIdentifier() {
		return processorIdentifier;
	}

	public void setProcessorIdentifier(String processorIdentifier) {
		this.processorIdentifier = processorIdentifier;
	}

	@Override
	public String toString() {
		return "CardUpdateView [cardNumber=" + cardNumber + ", cardStatusType=" + cardStatusType + ", cardType="
				+ cardType + ", displayName=" + displayName + ", expiresAt=" + expiresAt + ", issuedAt=" + issuedAt
				+ ", issuerIdentifier=" + issuerIdentifier + ", personIdentifier=" + personIdentifier
				+ ", processorIdentifier=" + processorIdentifier + "]";
	}

	@Override
	public CardUpdateView clone() {
		CardUpdateView cardUpdateView = new CardUpdateView(this.cardNumber, this.cardStatusType, this.cardType,
				this.displayName, this.expiresAt, this.issuedAt, this.issuerIdentifier, this.personIdentifier,
				this.processorIdentifier);
		return cardUpdateView;
	}
}
